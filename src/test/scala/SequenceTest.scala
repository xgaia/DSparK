import org.scalatest._
import scala.collection.immutable.BitSet
import sequence.Sequence


class SequenceTest extends FlatSpec {

  val ksize = 31
  val sequence = new Sequence(ksize)

  val stringSequence = "ACATCTGGTTCCTACTTCAGGGCCATAAAGCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCA"
  val stringForward = "ACATCTGGTTCCTACTTCAGGGCCATAAAGC"
  val stringRestOfSequence = "CTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCA"
  val longForward = 332115603131025421L
  val longReverse = 3936978869435781934L
  val longCanonical = 332115603131025421L
  val arrayOfTuple = Array((332115603131025421L,3936978869435781934L),
    (1328462412524101685L,4443009231179486411L),
    (702163631669018838L,1110752307794871602L),
    (2808654526676075352L,2583531086162411852L),
    (2011246069849525600L,2951725780754296915L),
    (3433298260970714496L,3043774454402268180L),
    (4509821007028082178L,760943613600567045L),
    (4204225972830165000L,2496078912613835713L),
    (2981845836038496291L,1776941232760305904L),
    (2704011307299209357L,3902999822010617404L),
    (1592673192342061621L,4434514469323195279L),
    (1759006750940858581L,4567393131151339747L),
    (2424340985336046420L,3447691292001528888L),
    (473991904489409873L,4320687336820923150L),
    (1895967617957639492L,3386014843418924739L),
    (2972184453403170065L,4305268224675272112L),
    (2665365776757904455L,2229238560775665004L),
    (1438091070176842014L,557309640193916251L),
    (1140678262279980154L,139327410048479062L),
    (4562713049119920617L,3493596366332660693L),
    (4415794141197518757L,4332163605403706101L),
    (3828118509507911317L,4541805415171467453L),
    (1477415982749481557L,4594215867613407791L),
    (1297977912570538326L,1148553966903351947L),
    (580225631854765402L,287138491725837986L),
    (2320902527419061608L,2377627632145153448L),
    (60238072821470624L,2900249917249982314L),
    (240952291285882496L,3030905488526189530L),
    (963809165143529986L,757726372131547382L),
    (3855236660574119944L,2495274602246580797L),
    (1585888587014316064L,2929661659775339151L),
    (1731868329629876355L,1885336919550681763L),
    (2315787300092117516L,2777177239101364392L),
    (39777163513694257L,4153058823595882026L),
    (159108654054777028L,3344107715112664458L),
    (636434616219108114L,836026928778166114L),
    (2545738464876432457L,3667771246015082456L),
    (959581822650954020L,3222785820717464566L),
    (3838327290603816081L,4264460968999907069L),
    (1518251107133100615L,2219036746856823743L),
    (1461318410105014556L,2860602195927899887L),
    (1233587621992670322L,715150548981974971L),
    (322664469543293387L,1331709141852340718L),
    (1290657878173173551L,1485848790069932155L),
    (550945494265306300L,2677305206731176990L),
    (2203781977061225202L,669326301682794247L),
    (4203441889817512905L,3626096089241239489L),
    (2978709503987887908L,3212367031524003824L),
    (2691465979096775825L,4261856271701541884L),
    (1542491879532327492L,3371307077139079423L),
    (1558281499701922067L,1995748273891616831L),
    (1621439980380300367L,1651858573079751183L),
    (1874073903093813566L,412964643269937795L),
    (2884609593947866361L,3562005674638025376L),
    (2315066338936689638L,890501418659506344L),
    (36893318891982744L,2528468363878570538L),
    (147573275567930978L,632117090969642634L),
    (590293102271723913L,3616793786562951586L),
    (2361172409086895652L,3210041455854431848L),
    (221317599492806801L,4261274877784148890L),
    (885270397971227205L,4524083233266578150L),
    (3541081591884908821L,4589785322137185465L),
    (329268312257471574L,1147446330534296366L),
    (1317073249029886296L,2592704591847268043L),
    (656606977692157282L,648176147961817010L),
    (2626427910768629130L,162044036990454252L),
    (1282339606219740712L,2346354018461307515L),
    (517672406451574944L,2892431513829020830L),
    (2070689625806299777L,4181872392277796135L),
    (3671072484797811205L,4504232611889989961L),
    (849231883909081108L,3431901162186191442L)
  )
  val arrayOfCanonical = Array((332115603131025421L, 1),
    (1328462412524101685L, 1),
    (702163631669018838L, 1),
    (2583531086162411852L, 1),
    (2011246069849525600L, 1),
    (3043774454402268180L, 1),
    (760943613600567045L, 1),
    (2496078912613835713L, 1),
    (1776941232760305904L, 1),
    (2704011307299209357L, 1),
    (1592673192342061621L, 1),
    (1759006750940858581L, 1),
    (2424340985336046420L, 1),
    (473991904489409873L, 1),
    (1895967617957639492L, 1),
    (2972184453403170065L, 1),
    (2229238560775665004L, 1),
    (557309640193916251L, 1),
    (139327410048479062L, 1),
    (3493596366332660693L, 1),
    (4332163605403706101L, 1),
    (3828118509507911317L, 1),
    (1477415982749481557L, 1),
    (1148553966903351947L, 1),
    (287138491725837986L, 1),
    (2320902527419061608L, 1),
    (60238072821470624L, 1),
    (240952291285882496L, 1),
    (757726372131547382L, 1),
    (2495274602246580797L, 1),
    (1585888587014316064L, 1),
    (1731868329629876355L, 1),
    (2315787300092117516L, 1),
    (39777163513694257L, 1),
    (159108654054777028L, 1),
    (636434616219108114L, 1),
    (2545738464876432457L, 1),
    (959581822650954020L, 1),
    (3838327290603816081L, 1),
    (1518251107133100615L, 1),
    (1461318410105014556L, 1),
    (715150548981974971L, 1),
    (322664469543293387L, 1),
    (1290657878173173551L, 1),
    (550945494265306300L, 1),
    (669326301682794247L, 1),
    (3626096089241239489L, 1),
    (2978709503987887908L, 1),
    (2691465979096775825L, 1),
    (1542491879532327492L, 1),
    (1558281499701922067L, 1),
    (1621439980380300367L, 1),
    (412964643269937795L, 1),
    (2884609593947866361L, 1),
    (890501418659506344L, 1),
    (36893318891982744L, 1),
    (147573275567930978L, 1),
    (590293102271723913L, 1),
    (2361172409086895652L, 1),
    (221317599492806801L, 1),
    (885270397971227205L, 1),
    (3541081591884908821L, 1),
    (329268312257471574L, 1),
    (1317073249029886296L, 1),
    (648176147961817010L, 1),
    (162044036990454252L, 1),
    (1282339606219740712L, 1),
    (517672406451574944L, 1),
    (2070689625806299777L, 1),
    (3671072484797811205L, 1),
    (849231883909081108L, 1)
  )



  "Nucleotide" must "be converted to Long" in {
    assert(sequence.nuclToLong('A') == 0L)
    assert(sequence.nuclToLong('C') == 1L)
    assert(sequence.nuclToLong('T') == 2L)
    assert(sequence.nuclToLong('G') == 3L)
  }

  "Kmer string" must "be converted to a tuple of Long" in {
    assert(sequence.kmerToLongTuple(stringForward) == (longForward, longReverse))
    assert(sequence.kmerToLongTuple(stringForward, stringForward.reverse, (0L, 0L)) == (longForward, longReverse))
  }

  "Tuple of Long" must "be converted to canonical tuple" in {
    assert(sequence.getCanonical(longForward, longReverse) == (longCanonical, 1))
  }

  "Long" must "be converted to String" in {
    assert(sequence.longToString(longForward) == stringForward)
    assert(sequence.longToString(longForward, "") == stringForward)
  }

  "Array of Tuple of kmer" must "be extended with the rest of sequence" in {
    assert(sequence.extendsArrayOfKmersLongTuple(stringRestOfSequence, Array((longForward, longReverse))) === arrayOfTuple)
  }

  "Sequence" must "be converted to canonical long" in {
    assert(sequence.sequenceToLongCanonicalKmers(stringSequence) === arrayOfCanonical)
  }

}
